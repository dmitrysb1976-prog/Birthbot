import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime, timedelta
import asyncio
from telegram import Bot
import logging
import os
import json  # –¥–æ–±–∞–≤–∏–ª–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

TELEGRAM_TOKEN = "8373441354:AAGFRXqeet3CmeX0yA7U-fL1Ta_Yjg5D9xo"
CHANNEL_ID = "@testNewTerritory"
GOOGLE_SHEET_URL = "https://docs.google.com/spreadsheets/d/1ldoSSLZKb7nEXb5pKSH90PT3IgKMNc9Rj9JjfAUz0JU/edit?usp=sharing"

# –ü–æ–ª—É—á–∞–µ–º credentials –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
CREDENTIALS_JSON = os.getenv('GOOGLE_CREDENTIALS')

if not CREDENTIALS_JSON:
    logger.critical("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è GOOGLE_CREDENTIALS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
    raise SystemExit("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets")

scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]

async def init_google_sheets():
    try:
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º json.loads –≤–º–µ—Å—Ç–æ eval
        creds_dict = json.loads(CREDENTIALS_JSON)
        creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
        client = gspread.authorize(creds)
        sheet = client.open_by_url(GOOGLE_SHEET_URL).sheet1
        logger.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets")
        return sheet
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {str(e)}")
        raise

bot = Bot(token=TELEGRAM_TOKEN)

async def check_birthdays(sheet):
    try:
        today_str = datetime.now().strftime("%d.%m")
        logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–∞ –¥–∞—Ç—É: {today_str}")
        
        data = sheet.get_all_values()
        birthday_people = []

        for row in data[1:]:
            try:
                if len(row) >= 2:
                    name = row[0].strip()
                    date_cell = row[1].strip()
                    parsed_date = None

                    if date_cell.replace(".", "", 1).isdigit():
                        try:
                            serial_number = float(date_cell)
                            parsed_date = datetime(1899, 12, 30) + timedelta(days=serial_number)
                        except Exception as e:
                            logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã {date_cell}: {str(e)}")
                    else:
                        for fmt in ("%d.%m", "%d.%m.%Y", "%Y-%m-%d", "%m/%d/%Y"):
                            try:
                                parsed_date = datetime.strptime(date_cell, fmt)
                                break
                            except ValueError:
                                continue

                    if not parsed_date:
                        continue

                    if parsed_date.strftime("%d.%m") == today_str:
                        birthday_people.append(name)
                        logger.info(f"–ù–∞–π–¥–µ–Ω –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: {name}")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ {row}: {str(e)}")
                continue

        if birthday_people:
            # –¢–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º —Ç–µ–∫—Å—Ç–∞
            if len(birthday_people) == 1:
                message = f"–ù–∞—à –∏–º–µ–Ω–∏–Ω–Ω–∏–∫ —Å–µ–≥–æ–¥–Ω—è:\nüéà{birthday_people[0]}\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –î–Ω–µ–º –†–æ–∂–¥–µ–Ω–∏—è!!! ‚ù§Ô∏è"
            else:
                names_str = ", ".join(birthday_people)
                message = f"–ù–∞—à–∏ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∏ —Å–µ–≥–æ–¥–Ω—è:\nüéà{names_str}\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –î–Ω–µ–º –†–æ–∂–¥–µ–Ω–∏—è!!! ‚ù§Ô∏è"
            
            await bot.send_message(chat_id=CHANNEL_ID, text=message)
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
        else:
            logger.info("–°–µ–≥–æ–¥–Ω—è –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π –Ω–µ—Ç")

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ check_birthdays: {str(e)}")
        raise

async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    try:
        sheet = await init_google_sheets()
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.")
        
        while True:
            try:
                await check_birthdays(sheet)
                logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ñ–¥—É 24 —á–∞—Å–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...")
                await asyncio.sleep(24 * 60 * 60)  # —Å–ø–∏–º —Å—É—Ç–∫–∏
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {str(e)}")
                logger.info("–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 1 —á–∞—Å...")
                await asyncio.sleep(3600)  # –∂–¥–µ–º 1 —á–∞—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ
                
    except Exception as e:
        logger.critical(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}. –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        raise

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
    except Exception as e:
        logger.critical(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")


